// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: job.proto

package job

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkClient is the client API for Work service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkClient interface {
	SubmitJob(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (Work_SubmitJobClient, error)
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Job, error)
}

type workClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkClient(cc grpc.ClientConnInterface) WorkClient {
	return &workClient{cc}
}

func (c *workClient) SubmitJob(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (Work_SubmitJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &Work_ServiceDesc.Streams[0], "/job.Work/SubmitJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &workSubmitJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Work_SubmitJobClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type workSubmitJobClient struct {
	grpc.ClientStream
}

func (x *workSubmitJobClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/job.Work/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkServer is the server API for Work service.
// All implementations must embed UnimplementedWorkServer
// for forward compatibility
type WorkServer interface {
	SubmitJob(*SubmitRequest, Work_SubmitJobServer) error
	GetStatus(context.Context, *StatusRequest) (*Job, error)
	mustEmbedUnimplementedWorkServer()
}

// UnimplementedWorkServer must be embedded to have forward compatible implementations.
type UnimplementedWorkServer struct {
}

func (UnimplementedWorkServer) SubmitJob(*SubmitRequest, Work_SubmitJobServer) error {
	return status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}
func (UnimplementedWorkServer) GetStatus(context.Context, *StatusRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedWorkServer) mustEmbedUnimplementedWorkServer() {}

// UnsafeWorkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkServer will
// result in compilation errors.
type UnsafeWorkServer interface {
	mustEmbedUnimplementedWorkServer()
}

func RegisterWorkServer(s grpc.ServiceRegistrar, srv WorkServer) {
	s.RegisterService(&Work_ServiceDesc, srv)
}

func _Work_SubmitJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubmitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkServer).SubmitJob(m, &workSubmitJobServer{stream})
}

type Work_SubmitJobServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type workSubmitJobServer struct {
	grpc.ServerStream
}

func (x *workSubmitJobServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

func _Work_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.Work/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Work_ServiceDesc is the grpc.ServiceDesc for Work service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Work_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job.Work",
	HandlerType: (*WorkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _Work_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitJob",
			Handler:       _Work_SubmitJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "job.proto",
}
