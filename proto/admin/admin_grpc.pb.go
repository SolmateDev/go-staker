// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ValidatorClient is the client API for Validator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidatorClient interface {
	// get the default period settings
	GetDefault(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Settings, error)
	// set the default period settings
	SetDefault(ctx context.Context, in *Settings, opts ...grpc.CallOption) (*Settings, error)
	// log
	GetLogStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Validator_GetLogStreamClient, error)
}

type validatorClient struct {
	cc grpc.ClientConnInterface
}

func NewValidatorClient(cc grpc.ClientConnInterface) ValidatorClient {
	return &validatorClient{cc}
}

func (c *validatorClient) GetDefault(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := c.cc.Invoke(ctx, "/admin.Validator/GetDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorClient) SetDefault(ctx context.Context, in *Settings, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := c.cc.Invoke(ctx, "/admin.Validator/SetDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorClient) GetLogStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Validator_GetLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Validator_ServiceDesc.Streams[0], "/admin.Validator/GetLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &validatorGetLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Validator_GetLogStreamClient interface {
	Recv() (*LogLine, error)
	grpc.ClientStream
}

type validatorGetLogStreamClient struct {
	grpc.ClientStream
}

func (x *validatorGetLogStreamClient) Recv() (*LogLine, error) {
	m := new(LogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ValidatorServer is the server API for Validator service.
// All implementations must embed UnimplementedValidatorServer
// for forward compatibility
type ValidatorServer interface {
	// get the default period settings
	GetDefault(context.Context, *Empty) (*Settings, error)
	// set the default period settings
	SetDefault(context.Context, *Settings) (*Settings, error)
	// log
	GetLogStream(*Empty, Validator_GetLogStreamServer) error
	mustEmbedUnimplementedValidatorServer()
}

// UnimplementedValidatorServer must be embedded to have forward compatible implementations.
type UnimplementedValidatorServer struct {
}

func (UnimplementedValidatorServer) GetDefault(context.Context, *Empty) (*Settings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefault not implemented")
}
func (UnimplementedValidatorServer) SetDefault(context.Context, *Settings) (*Settings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefault not implemented")
}
func (UnimplementedValidatorServer) GetLogStream(*Empty, Validator_GetLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogStream not implemented")
}
func (UnimplementedValidatorServer) mustEmbedUnimplementedValidatorServer() {}

// UnsafeValidatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidatorServer will
// result in compilation errors.
type UnsafeValidatorServer interface {
	mustEmbedUnimplementedValidatorServer()
}

func RegisterValidatorServer(s grpc.ServiceRegistrar, srv ValidatorServer) {
	s.RegisterService(&Validator_ServiceDesc, srv)
}

func _Validator_GetDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServer).GetDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Validator/GetDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServer).GetDefault(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Validator_SetDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Settings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServer).SetDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Validator/SetDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServer).SetDefault(ctx, req.(*Settings))
	}
	return interceptor(ctx, in, info, handler)
}

func _Validator_GetLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ValidatorServer).GetLogStream(m, &validatorGetLogStreamServer{stream})
}

type Validator_GetLogStreamServer interface {
	Send(*LogLine) error
	grpc.ServerStream
}

type validatorGetLogStreamServer struct {
	grpc.ServerStream
}

func (x *validatorGetLogStreamServer) Send(m *LogLine) error {
	return x.ServerStream.SendMsg(m)
}

// Validator_ServiceDesc is the grpc.ServiceDesc for Validator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Validator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Validator",
	HandlerType: (*ValidatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefault",
			Handler:    _Validator_GetDefault_Handler,
		},
		{
			MethodName: "SetDefault",
			Handler:    _Validator_SetDefault_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogStream",
			Handler:       _Validator_GetLogStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}
